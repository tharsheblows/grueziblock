{"version":3,"sources":["postcontent-block.jsx"],"names":["__","wp","i18n","blocks","registerBlockType","Editable","BlockDescription","children","source","title","icon","category","attributes","frequentlyAskedQuestion","selector","query","q","a","question","answer","edit","focusedEditable","props","focus","editable","length","setAttributes","onChangeQuestion","value","onChangeAnswer","onFocusQuestion","setFocus","_","extend","onFocusAnswer","className","save","console","log"],"mappings":"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","file":"postcontent-block.js","sourcesContent":["const { __ } = wp.i18n;\nconst {\n\tregisterBlockType,\n\tEditable,\n\t// I'm not using the InspectorControls or BlockControl but you can see the docs here https://wordpress.org/gutenberg/handbook/blocks/block-controls-toolbars-and-inspector/\n\tBlockDescription, // and the BlockDescription\n\tsource: {\n\t\tchildren\n\t}\n} = wp.blocks;\n\nregisterBlockType( 'grueziblock/faq', {\n\ttitle: __( 'Hello faq' ), // this is what shows in the blocks list\n\ticon: 'index-card', // you can pick different icons. there must be a list somewhere.\n\tcategory: 'common', // where do you want this to show up? this will be under \"common\" in the blocks\n\tattributes: {\n\t\t// our faq, like many faqs, will have questions and answers\n\t\t// Ha HA, this is where things have changed. Because we have two Editable components (I think this is why I need to do this),\n\t\t// I am going to query the div then pick out the nodes I need\n\t\tfrequentlyAskedQuestion: {\n\t\t\tsource: 'query', // https://wordpress.org/gutenberg/handbook/reference/attributes/#query\n\t\t\tselector: 'div', // ok, get the div and phew there's only one div\n\t\t\tquery: {\n\t\t\t\tq: { source: 'text', selector: 'h4' }, // the question is in the h4\n            \ta: { source: 'text', selector: 'p.answer' } // the answer is in p.answer\n            }\n\t\t},\n\n\t\tquestion: {},\n\t\tanswer: {},\n\t},\n\n\t// this is responsible for the editor side of things in wp-admin when you're making a post\n\tedit: props => {\n\n\t\t// focus on the question bit as default\n\t\tconst focusedEditable = props.focus ? props.focus.editable || null : null;\n\n\t\tconst attributes = props.attributes;\n\n\t\tif ( attributes.length > 0 && attributes.frequentlyAskedQuestion.length > 0 ) {\n\t\t\tprops.setAttributes( { question: attributes.frequentlyAskedQuestion[0].q } );\n\t\t\tprops.setAttributes( { answer: attributes.frequentlyAskedQuestion[0].a } );\n\t\t}\n\n\t\t// the function which handles what happens when the question is changed\n\t\tconst onChangeQuestion = value => {\n\t\t\tprops.setAttributes( { question: value } );\n\t\t};\n\t\t// the function which handles what happens when the answer is changed\n\t\tconst onChangeAnswer = value => {\n\t\t\tprops.setAttributes( { answer: value } );\n\t\t};\n\n\t\t// the function which handles what happens when focus is on something\n\t\tconst onFocusQuestion = focus => {\n\t\t\tprops.setFocus( _.extend( {}, focus, { editable: 'question'} ) );\n\t\t};\n\t\t// the function which handles what happens when focus is on something\n\t\tconst onFocusAnswer = focus => {\n\t\t\tprops.setFocus( _.extend( {}, focus, { editable: 'answer'} ) );\n\t\t};\n\n\t\t// This is the bit that handles rendering in the editor\n\t\t// In the Gutenberg plugin, they return an array but I'm going to do it like the Gutenberg examples plugin and wrap it all in a div to return one node\n\t\t// \n\t\t// The Editable component's docs are here: https://wordpress.org/gutenberg/handbook/blocks/introducing-attributes-and-editable-fields/\n\t\t// but you see that I'm putting the question in an h4 and the answer in a div with class=\"answer\". In React you need to use className instead of class for reasons I forget.\n\t\t// \n\t\t// So for each editable field, I use an Editable compontent which handles the editableness of that bit. I can put html all around everything\n\t\treturn (\n\n\t\t\t<div className={ props.className } key=\"editor\">\n\t\t\t\t\t<Editable\n\t\t\t\t\t\ttagName=\"h4\"\n\t\t\t\t\t\tplaceholder={ __( 'Please add a question here' ) }\n\t\t\t\t\t\tvalue={ attributes.question }\n\t\t\t\t\t\tonChange={ onChangeQuestion }\n\t\t\t\t\t\tfocus={ focusedEditable === 'question' }\n\t\t\t\t\t\tonFocus={ onFocusQuestion }\n\t\t\t\t\t/>\n\t\n\t\t\t\t\t\n\t\t\t\t\t<Editable\n\t\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\t\tclassName=\"answer\"\n\t\t\t\t\t\tplaceholder={ __( 'Please add an answer here' ) }\n\t\t\t\t\t\tvalue={ attributes.answer }\n\t\t\t\t\t\tonChange={ onChangeAnswer }\n\t\t\t\t\t\tfocus={ focusedEditable === 'answer' }\n\t\t\t\t\t\tonFocus={ onFocusAnswer }\n\t\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n\n\n\t// Now this is what will save in your database and it's what will be displayed like normal \n\t// except that this will be in between html comments like <!-- wp:grueziblock/faq --> <!-- /wp:grueziblock/faq -->\n\tsave: props => {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tattributes: {\n\t\t\t\t// the question\n\t\t\t\tquestion,\n\t\t\t\t// the answer\n\t\t\t\tanswer\n\t\t\t}\n\t\t} = props;\n\n\t\t// This is so you can see when it runs. :) \n\t\tconsole.log( 'Hey! the save function in registerBlockType just ran. :) ');\n\n\t\t// this is what gets saved. Anything returned here will go into post_content.\n\t\t// this is what it will look like on the front end:\n\t\t// <div class=\"wp-block-grueziblock-faq\">\n\t\t// \t\t<div class=\"question\">\n\t\t//    \t\t<h4>Question?</h4>\n\t\t// \t\t</div>\n\t\t// \t\t<div class=\"answer\">\n\t\t//    \t\t<p>This is the answer</p>\n\t\t//  \t</div>\n\t\t// </div>\n\n\t\treturn (\n\t\t\t<div className={ className }>\n\t\t\t\t<h4>{ question }</h4>\n\t\t\t\t<p className=\"answer\">\n\t\t\t\t\t{ answer }\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n} );\n"]}