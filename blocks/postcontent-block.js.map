{"version":3,"sources":["jsx/postcontent-block.jsx"],"names":["__","wp","i18n","blocks","registerBlockType","Editable","BlockDescription","children","source","title","icon","category","attributes","question","type","selector","answer","edit","focusedEditable","props","focus","editable","onChangeQuestion","setAttributes","value","onChangeAnswer","onFocusQuestion","setFocus","_","extend","onFocusAnswer","className","save","console","log"],"mappings":";;IAAQA,E,GAAOC,GAAGC,I,CAAVF,E;iBASJC,GAAGE,M;IAPNC,iB,cAAAA,iB;IACAC,Q,cAAAA,Q;IAEAC,gB,cAAAA,gB;IAECC,Q,cADDC,M,CACCD,Q;;;AAIFH,kBAAmB,iBAAnB,EAAsC;AACrCK,QAAOT,GAAI,WAAJ,CAD8B,EACX;AAC1BU,OAAM,YAF+B,EAEjB;AACpBC,WAAU,QAH2B,EAGjB;AACpBC,aAAY;AACX;AACA;AACAC,YAAU;AACTC,SAAM,OADG;AAETN,WAAQ,UAFC;AAGTO,aAAU;AAHD,GAHC;AAQX;AACAC,UAAQ;AACPF,SAAM,OADC;AAEPN,WAAQ,UAFD;AAGPO,aAAU;AAHH;AATG,EAJyB;;AAoBrC;AACAE,OAAM,qBAAS;;AAEd;AACA,MAAMC,kBAAkBC,MAAMC,KAAN,GAAcD,MAAMC,KAAN,CAAYC,QAAZ,IAAwB,IAAtC,GAA6C,IAArE;;AAEA,MAAMT,aAAaO,MAAMP,UAAzB;;AAEA;AACA,MAAMU,mBAAmB,SAAnBA,gBAAmB,QAAS;AACjCH,SAAMI,aAAN,CAAqB,EAAEV,UAAUW,KAAZ,EAArB;AACA,GAFD;AAGA;AACA,MAAMC,iBAAiB,SAAjBA,cAAiB,QAAS;AAC/BN,SAAMI,aAAN,CAAqB,EAAEP,QAAQQ,KAAV,EAArB;AACA,GAFD;;AAIA;AACA,MAAME,kBAAkB,SAAlBA,eAAkB,QAAS;AAChCP,SAAMQ,QAAN,CAAgBC,EAAEC,MAAF,CAAU,EAAV,EAAcT,KAAd,EAAqB,EAAEC,UAAU,UAAZ,EAArB,CAAhB;AACA,GAFD;AAGA;AACA,MAAMS,gBAAgB,SAAhBA,aAAgB,QAAS;AAC9BX,SAAMQ,QAAN,CAAgBC,EAAEC,MAAF,CAAU,EAAV,EAAcT,KAAd,EAAqB,EAAEC,UAAU,QAAZ,EAArB,CAAhB;AACA,GAFD;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAEC;AAAA;AAAA,KAAK,WAAYF,MAAMY,SAAvB,EAAmC,KAAI,QAAvC;AACE,uBAAC,QAAD;AACC,aAAQ,IADT;AAEC,iBAAc/B,GAAI,4BAAJ,CAFf;AAGC,WAAQY,WAAWC,QAHpB;AAIC,cAAWS,gBAJZ;AAKC,WAAQJ,oBAAoB,UAL7B;AAMC,aAAUQ;AANX,KADF;AAWE,uBAAC,QAAD;AACC,aAAQ,GADT;AAEC,eAAU,QAFX;AAGC,iBAAc1B,GAAI,2BAAJ,CAHf;AAIC,WAAQY,WAAWI,MAJpB;AAKC,cAAWS,cALZ;AAMC,WAAQP,oBAAoB,QAN7B;AAOC,aAAUY;AAPX;AAXF,GAFD;AAwBA,EA7EoC;;AAgFrC;AACA;AACAE,OAAM,qBAAS;AAAA,MAEbD,SAFa,GASVZ,KATU,CAEbY,SAFa;AAAA,0BASVZ,KATU,CAGbP,UAHa;AAAA,MAKZC,QALY,qBAKZA,QALY;AAAA,MAOZG,MAPY,qBAOZA,MAPY;;AAWd;;AACAiB,UAAQC,GAAR,CAAa,oFAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACC;AAAA;AAAA,KAAK,WAAYH,SAAjB;AACC;AAAA;AAAA;AAAMlB;AAAN,IADD;AAEC;AAAA;AAAA,MAAG,WAAU,QAAb;AACGG;AADH;AAFD,GADD;AAQA;AAnHoC,CAAtC","file":"postcontent-block.js","sourcesContent":["const { __ } = wp.i18n;\nconst {\n\tregisterBlockType,\n\tEditable,\n\t// I'm not using the InspectorControls or BlockControl but you can see the docs here https://wordpress.org/gutenberg/handbook/blocks/block-controls-toolbars-and-inspector/\n\tBlockDescription, // and the BlockDescription\n\tsource: {\n\t\tchildren\n\t}\n} = wp.blocks;\n\nregisterBlockType( 'grueziblock/faq', {\n\ttitle: __( 'Hello faq' ), // this is what shows in the blocks list\n\ticon: 'index-card', // you can pick different icons. there must be a list somewhere.\n\tcategory: 'common', // where do you want this to show up? this will be under \"common\" in the blocks\n\tattributes: {\n\t\t// our faq, like many faqs, will have questions and answers\n\t\t// the question attribute is going to be an h4 element even though I am fairly sure this isn't good\n\t\tquestion: {\n\t\t\ttype: 'array',\n\t\t\tsource: 'children',\n\t\t\tselector: 'h4',\n\t\t},\n\t\t// the answer attribute will be in a div with class=\"answer\". \n\t\tanswer: {\n\t\t\ttype: 'array',\n\t\t\tsource: 'children',\n\t\t\tselector: '.answer',\n\t\t},\n\t},\n\n\t// this is responsible for the editor side of things in wp-admin when you're making a post\n\tedit: props => {\n\n\t\t// focus on the question bit as default\n\t\tconst focusedEditable = props.focus ? props.focus.editable || null : null;\n\n\t\tconst attributes = props.attributes;\n\n\t\t// the function which handles what happens when the question is changed\n\t\tconst onChangeQuestion = value => {\n\t\t\tprops.setAttributes( { question: value } );\n\t\t};\n\t\t// the function which handles what happens when the answer is changed\n\t\tconst onChangeAnswer = value => {\n\t\t\tprops.setAttributes( { answer: value } );\n\t\t};\n\n\t\t// the function which handles what happens when focus is on something\n\t\tconst onFocusQuestion = focus => {\n\t\t\tprops.setFocus( _.extend( {}, focus, { editable: 'question'} ) );\n\t\t};\n\t\t// the function which handles what happens when focus is on something\n\t\tconst onFocusAnswer = focus => {\n\t\t\tprops.setFocus( _.extend( {}, focus, { editable: 'answer'} ) );\n\t\t};\n\n\t\t// This is the bit that handles rendering in the editor\n\t\t// In the Gutenberg plugin, they return an array but I'm going to do it like the Gutenberg examples plugin and wrap it all in a div to return one node\n\t\t// \n\t\t// The Editable component's docs are here: https://wordpress.org/gutenberg/handbook/blocks/introducing-attributes-and-editable-fields/\n\t\t// but you see that I'm putting the question in an h4 and the answer in a div with class=\"answer\". In React you need to use className instead of class for reasons I forget.\n\t\t// \n\t\t// So for each editable field, I use an Editable compontent which handles the editableness of that bit. I can put html all around everything\n\t\treturn (\n\n\t\t\t<div className={ props.className } key=\"editor\">\n\t\t\t\t\t<Editable\n\t\t\t\t\t\ttagName=\"h4\"\n\t\t\t\t\t\tplaceholder={ __( 'Please add a question here' ) }\n\t\t\t\t\t\tvalue={ attributes.question }\n\t\t\t\t\t\tonChange={ onChangeQuestion }\n\t\t\t\t\t\tfocus={ focusedEditable === 'question' }\n\t\t\t\t\t\tonFocus={ onFocusQuestion }\n\t\t\t\t\t/>\n\t\n\t\t\t\t\t\n\t\t\t\t\t<Editable\n\t\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\t\tclassName=\"answer\"\n\t\t\t\t\t\tplaceholder={ __( 'Please add an answer here' ) }\n\t\t\t\t\t\tvalue={ attributes.answer }\n\t\t\t\t\t\tonChange={ onChangeAnswer }\n\t\t\t\t\t\tfocus={ focusedEditable === 'answer' }\n\t\t\t\t\t\tonFocus={ onFocusAnswer }\n\t\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n\n\n\t// Now this is what will save in your database and it's what will be displayed like normal \n\t// except that this will be in between html comments like <!-- wp:grueziblock/faq --> <!-- /wp:grueziblock/faq -->\n\tsave: props => {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tattributes: {\n\t\t\t\t// the question\n\t\t\t\tquestion,\n\t\t\t\t// the answer\n\t\t\t\tanswer\n\t\t\t}\n\t\t} = props;\n\n\t\t// This is so you can see when it runs. :) \n\t\tconsole.log( 'Hey! The save function in registerBlockType in the postcontent block just ran. :) ');\n\n\t\t// this is what gets saved. Anything returned here will go into post_content.\n\t\t// this is what it will look like on the front end:\n\t\t// <div class=\"wp-block-grueziblock-faq\">\n\t\t// \t\t<div class=\"question\">\n\t\t//    \t\t<h4>Question?</h4>\n\t\t// \t\t</div>\n\t\t// \t\t<div class=\"answer\">\n\t\t//    \t\t<p>This is the answer</p>\n\t\t//  \t</div>\n\t\t// </div>\n\n\t\treturn (\n\t\t\t<div className={ className }>\n\t\t\t\t<h4>{ question }</h4>\n\t\t\t\t<p className=\"answer\">\n\t\t\t\t\t{ answer }\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n} );"]}