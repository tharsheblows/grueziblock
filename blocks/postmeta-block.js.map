{"version":3,"sources":["jsx/postmeta-block.jsx"],"names":["__","wp","i18n","blocks","registerBlockType","Editable","BlockDescription","meta","source","title","icon","category","attributes","someText","type","useOnce","edit","focusedEditable","props","focus","editable","onChangeSomeText","setAttributes","value","onFocusSomeText","setFocus","_","extend","className","save","console","log"],"mappings":";;IAAQA,E,GAAOC,GAAGC,I,CAAVF,E;iBASJC,GAAGE,M;IAPNC,iB,cAAAA,iB;IACAC,Q,cAAAA,Q;IAEAC,gB,cAAAA,gB;IAECC,I,cADDC,M,CACCD,I;;;AAIFH,kBAAmB,qBAAnB,EAA0C;AACzCK,QAAOT,GAAI,iBAAJ,CADkC,EACT;AAChCU,OAAM,MAFmC,EAE3B;AACdC,WAAU,QAH+B,EAGrB;AACpBC,aAAY;AACX;AACAC,YAAU;AACTC,SAAM,QADG,EACO;AAChBN,WAAQ,MAFC,EAEO;AAChBD,SAAM,sBAHG,CAGqB;AAHrB;AAFC,EAJ6B;AAYzCQ,UAAS,IAZgC,EAY1B;;AAEf;AACAC,OAAM,qBAAS;;AAEd;AACA,MAAMC,kBAAkBC,MAAMC,KAAN,GAAcD,MAAMC,KAAN,CAAYC,QAAZ,IAAwB,IAAtC,GAA6C,IAArE;;AAEA,MAAMR,aAAaM,MAAMN,UAAzB;;AAEA;AACA,MAAMS,mBAAmB,SAAnBA,gBAAmB,QAAS;AACjCH,SAAMI,aAAN,CAAqB,EAAET,UAAUU,KAAZ,EAArB;AACA,GAFD;;AAIA;AACA,MAAMC,kBAAkB,SAAlBA,eAAkB,QAAS;AAChCN,SAAMO,QAAN,CAAgBC,EAAEC,MAAF,CAAU,EAAV,EAAcR,KAAd,EAAqB,EAAEC,UAAU,UAAZ,EAArB,CAAhB;AACA,GAFD;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,SAEC;AAAA;AAAA;AAEC;AAAA;AAAA,MAAK,WAAYF,MAAMU,SAAvB,EAAmC,KAAI,aAAvC;AACC;AAAA;AAAA,OAAG,WAAU,aAAb;AAAA;AAAA,KADD;AAEC,wBAAC,QAAD;AACC,cAAQ,GADT;AAEC,kBAAc5B,GAAI,sFAAJ,CAFf;AAGC,YAAQY,WAAWC,QAHpB;AAIC,eAAWQ,gBAJZ;AAKC,YAAQJ,oBAAoB,UAL7B;AAMC,cAAUO;AANX;AAFD;AAFD,GAFD;AAkBA,EAzDwC;;AA4DzC;AACA;AACAK,OAAM,qBAAS;AAAA,MAEbD,SAFa,GAOVV,KAPU,CAEbU,SAFa;AAAA,MAKZf,QALY,GAOVK,KAPU,CAGbN,UAHa,CAKZC,QALY;;AASd;;AACAiB,UAAQC,GAAR,CAAa,mDAAmDlB,QAAnD,GAA8D,OAA3E;;AAEA;AACA,SAAO,IAAP;AACA;AA5EwC,CAA1C","file":"postmeta-block.js","sourcesContent":["const { __ } = wp.i18n;\nconst {\n\tregisterBlockType,\n\tEditable,\n\t// I'm not using the InspectorControls or BlockControl but you can see the docs here https://wordpress.org/gutenberg/handbook/blocks/block-controls-toolbars-and-inspector/\n\tBlockDescription, // and the BlockDescription\n\tsource: {\n\t\tmeta\t// I'm just using meta here, this only stores meta\n\t}\n} = wp.blocks;\n\nregisterBlockType( 'grueziblock/faqmeta', {\n\ttitle: __( 'Hello faq meta!' ), // this is what shows in the blocks list\n\ticon: 'book', // you can pick different icons. there must be a list somewhere. this one is a book.\n\tcategory: 'common', // where do you want this to show up? this will be under \"common\" in the blocks\n\tattributes: {\n\t\t// so let's store a meta so people can add some text, maybe a url or whatever to the post\n\t\tsomeText: {\n\t\t\ttype: 'string', // This is going to be a string. I think using this, you are limited to what register_meta can handle.\n\t\t\tsource: 'meta', // This is going to come from postmeta\n\t\t\tmeta: 'grueziblock_sometext', // this is the metakey registered in grueziblock.php\n\t\t}\n\t},\n\tuseOnce: true, // you can only add this once, soz\n\n\t// this is responsible for the editor side of things in wp-admin when you're making a post\n\tedit: props => {\n\n\t\t// focus on the someText bit as default\n\t\tconst focusedEditable = props.focus ? props.focus.editable || null : null;\n\n\t\tconst attributes = props.attributes;\n\n\t\t// the function which handles what happens when someText is changed\n\t\tconst onChangeSomeText = value => {\n\t\t\tprops.setAttributes( { someText: value } );\n\t\t};\n\n\t\t// the function which handles what happens when focus is on something\n\t\tconst onFocusSomeText = focus => {\n\t\t\tprops.setFocus( _.extend( {}, focus, { editable: 'someText' } ) );\n\t\t};\n\n\n\t\t// This is the bit that handles rendering in the editor\n\t\t// In the Gutenberg plugin, they return an array but I'm going to do it like the Gutenberg examples plugin and wrap it all in a div to return one node\n\t\t// \n\t\t// The Editable component's docs are here: https://wordpress.org/gutenberg/handbook/blocks/introducing-attributes-and-editable-fields/\n\t\t// but you see that I'm putting \"someText\" in a p tag. It will fill the paragraph with whatever is the grueziblock_sometext meta value.\n\t\t// \n\t\treturn (\n\n\t\t\t<div>\n\n\t\t\t\t<div className={ props.className } key=\"editor-meta\">\n\t\t\t\t\t<p className=\"gruezi-info\">Below is the Hello faq meta block. This bit won't save, it's just here fyi. I put a border around this block just for fun.</p>\n\t\t\t\t\t<Editable\n\t\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\t\tplaceholder={ __( 'Please add some text, maybe a link to your blog or a note about why you are awesome.' ) }\n\t\t\t\t\t\tvalue={ attributes.someText }\n\t\t\t\t\t\tonChange={ onChangeSomeText }\n\t\t\t\t\t\tfocus={ focusedEditable === 'someText' }\n\t\t\t\t\t\tonFocus={ onFocusSomeText }\n\t\t\t\t\t/>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t},\n\n\n\t// Now this is what will save in your database and it's what will be displayed like normal \n\t// except that this will be in between html comments like <!-- wp:grueziblock/faq --> <!-- /wp:grueziblock/faq -->\n\tsave: props => {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tattributes: {\n\t\t\t\t// someText\n\t\t\t\tsomeText\n\t\t\t}\n\t\t} = props;\n\n\t\t// This is so you can see when it runs. :) \n\t\tconsole.log( 'Hey! You just saved or at least tried to save ' + someText + '  :) ');\n\n\t\t// This is returning nothing because registerBlockType handles saving the meta for you and you don't want to add anything to post_content\n\t\treturn null;\n\t}\n} );"]}