{"version":3,"sources":["jsx/metafromregisterrestfield-block.jsx"],"names":["__","wp","i18n","blocks","registerBlockType","Editable","Component","element","withAPIData","components","title","icon","category","attributes","somewhere","useOnce","edit","props","postId","_wpGutenbergPost","id","post","data","length","onChangeFaqField","setAttributes","value","toString","undefined","theValue","className","grueziblock_somewhere","save","GrueziblockSomewhereSave","console","log","body","jQuery","ajax","method","url","beforeSend","xhr","setRequestHeader","wpApiSettings","nonce","done","fail","responseJSON","message"],"mappings":"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","file":"metafromregisterrestfield-block.js","sourcesContent":["const { __ } = wp.i18n;\nconst {\n\tregisterBlockType,\n\tEditable\n} = wp.blocks;\nconst{\n\tComponent\n} = wp.element;\nconst { withAPIData } = wp.components;\n\n// What I'm trying to do here (because it is *not* obvious, I know): \n// Add a block which allows an entry in postmeta and registered via register_rest_field (rather than register_meta) to be shown and edited.\n// In this version, it does not save anything to post_content, I'm not using register_block_type in grueziblock.php (well it's there, just commented out)\n// It saves when save() runs and there's something in the field. Thus far this is only when I press the update button which is fine but might not be if someone relies on revisions?\n\nregisterBlockType( 'grueziblock/faqrestfield', {\n\ttitle: __( 'Hello faq rest field :)' ), // this is what shows in the blocks list\n\ticon: 'dashicons-admin-home', // It's a house. https://developer.wordpress.org/resource/dashicons/#admin-home\n\tcategory: 'common', // This will be in the \"common\" tab in the blocks lists.\n\tattributes: {\n\t\tsomewhere: {} // declaring the attribute here seems to make everything work a bit better, I mean, thinking about it this makes total sense doesn't it?\n\t},\n\tuseOnce: true, // You can only use this once, soz babe\n\n\t// this is responsible for the editor side of things in wp-admin when you're making a post\n\t// I'm using withAPIData https://github.com/WordPress/gutenberg/blob/master/docs/blocks-dynamic.md\n\t// better docs: https://github.com/WordPress/gutenberg/blob/master/components/higher-order/with-api-data/README.md\n\tedit: withAPIData( ( props ) => {\n\n\t\tlet postId = _wpGutenbergPost.id; // I am picking this up from _wpGutenbergPost because it's there, wheeeeeeee.\n\n\t\treturn {\n\t\t\tpost: '/wp/v2/posts/' + postId + '/' // get the post we're editing\n\t\t};\n\t} ) ( ( props ) => {\n\n\t\t// If there's no data yet, let people know\n\t\tif( ! props.post.data ) {\n\t\t\treturn \"loading (if you see this for too long, the endpoint is probably wrong)\";\n\t\t}\n\t\t// If there's no post, then tell someone! See something say something!\n\t\tif( props.post.data.length === 0 ){\n\t\t\treturn \"no post!\"\n\t\t}\n\n\t\t// what happens when we change the field? Well let's reset the attributes.\n\t\tconst onChangeFaqField = value => {\n\t\t\t// why can't I use props.setAttributes here? I have it, it's right there. It's just not working.\n\t\t\t// why does this work?\n\t\t\tprops.setAttributes({ somewhere: value.toString() }); // Editable and register_rest_field do *not* play nicely together\n\t\t}\n\n\t\t// It seems that it's entirely possible there's a race condition here with the Editable attribute trying to mount but props.attributes.somewhere hasn't been set\n\t\t// so let's check to make sure it's defined (empty is ok!), can we do it like this -- I mean this is working but I thought it was more complicated\n\t\tif( props.attributes.somewhere !== undefined ){\n\t\t\t// the value is an array because of Editable and just it just is ok, leave me alone. I need to make it a string SHUT UP\n\t\t\tlet theValue = ( props.attributes.somewhere ) ? [props.attributes.somewhere] : []; // jiggery pokery so the placeholder works\n\t\t\treturn(\t\t\n\t\t\t\t<Editable\n\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\tclassName={ props.className }\n\t\t\t\t\tplaceholder={ __( 'wait for it' ) }\n\t\t\t\t\tvalue={ theValue } \n\t\t\t\t\tonChange={ onChangeFaqField }\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\t// Ok so tell me why props.setAttributes works here? Because it does! Weird.\n\t\t// TODO: revisit this because I might be doing something stupid\n\t\tif( props.attributes.somewhere === undefined ){\n\t\t\tprops.setAttributes({ somewhere: props.post.data.grueziblock_somewhere });\n\t\t}\n\t\t// so if there's no props.attributes.somewhere then we're here\n\t\treturn \"how did we get here then?\";\n\n\t} ),\n\n\tsave: ( props ) => {\n\t\t// this returns null! I'm using it to save the value without everything freaking out.\n\t\treturn ( \n\t\t\t<GrueziblockSomewhereSave\n\t\t\t\tattributes = { props.attributes }\n\t\t\t/> \n\t\t);\n\t} \n} );\n\nclass GrueziblockSomewhereSave extends Component {\n\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\t// I know I know but there's no component to mount! Maybe this should be in the constructor?\n\tcomponentWillMount () {\n\n\t\tlet attributes = this.props.attributes;\n\t\t// console.log( 'ok try to save the value which is this: ' + attributes.somewhere );\n\t\n\t\tlet postId = _wpGutenbergPost.id;  // I think if I had the revision id then I could save this too? \n\t\t// but this doesn't seem to be running for revisions? Which is ok I think because they are disabled on the host I think? I need to test this.\n\t\t// This is the published post (or the post id it will have it's published)\n\t\t// oh hey look! There's a revisions object in post data with count and last_id.\n\t\t// something to keep in mind\n\t\tconsole.log( attributes.somewhere );\n\t\tlet somewhere = ( attributes.somewhere ) ? attributes.somewhere : null; \n\n\t\t// the first time this is loaded, it's null \n\t\t// I need to check exactly when this is running because it doesn't seem to be running on autosave which makes sense? does it make sense?\n\t\tif( somewhere ){\n\t\t\tlet body = { grueziblock_somewhere: somewhere }; \n\t\t\tconsole.log( somewhere );\n\t\t\t// props.post.patch();\n\t\t\t// I'm so so so so so sorry, I'm skipping figuring out how the function above works, I am using jQuery just to move on.\n\t\t\tjQuery.ajax({\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\turl: '/wp-json/wp/v2/posts/' + postId + '/',\n\t\t\t\tdata: body,\n\t\t\t\tbeforeSend: function ( xhr ) {\n\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', wpApiSettings.nonce );\n\t\t\t\t},\n\t\t\t})\n\t\t\t.done( function ( data ){\n\t\t\t\tconsole.log( 'phew, done' );\n\t\t\t})\n\t\t\t.fail( function( data ){\n\t\t\t\tconsole.log( 'fail :(' );\n\t\t\t\tconsole.log( data.responseJSON.message );\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\t// nothing to see here\n\t\treturn ( null );\n\t}\n}\n"]}